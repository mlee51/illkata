webpackHotUpdate("illkata",{

/***/ "./packages/mytheme/src/components/index.js":
/*!**************************************************!*\
  !*** ./packages/mytheme/src/components/index.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _frontity_components_link__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @frontity/components/link */ \"./node_modules/@frontity/components/link/index.tsx\");\n/* harmony import */ var _frontity_components_switch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @frontity/components/switch */ \"./node_modules/@frontity/components/switch.tsx\");\n/* harmony import */ var _List__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./List */ \"./packages/mytheme/src/components/List.js\");\n/* harmony import */ var _Post__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Post */ \"./packages/mytheme/src/components/Post.js\");\n/* harmony import */ var _Page__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Page */ \"./packages/mytheme/src/components/Page.js\");\n/* harmony import */ var hamburger_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! hamburger-react */ \"./node_modules/hamburger-react/dist-esm/index.js\");\n/* harmony import */ var react_spring__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react-spring */ \"./node_modules/react-spring/web.js\");\n/* harmony import */ var _logo_png__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../logo.png */ \"./packages/mytheme/src/logo.png\");\n/* harmony import */ var _images_lesgomini_jpg__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../images/lesgomini.jpg */ \"./packages/mytheme/src/images/lesgomini.jpg\");\n/* harmony import */ var _useWindow__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./useWindow */ \"./packages/mytheme/src/components/useWindow.js\");\n/* harmony import */ var _Video__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./Video */ \"./packages/mytheme/src/components/Video.js\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}const Video2=()=>{return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"div\",{style:{position:\"fixed\",zIndex:\"-99\",width:\"100%\",height:\"100%\"},children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"iframe\",{frameborder:\"0\",height:\"100%\",width:\"100%\",src:\"https://youtube.com/embed/IR0Ouo1zACA?autoplay=1&controls=0&showinfo=0&autohide=1\"})});};const Component=()=>{const{height,width}=Object(_useWindow__WEBPACK_IMPORTED_MODULE_13__[\"default\"])();return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(\"div\",{children:[\"width: \",width,\" ~ height: \",height]});};var _ref= false?undefined:{name:\"kpuezy-Root\",styles:\"*{margin:0;padding:0;box-sizing:border-box;width:100%;}html{color:white;background-color:black;width:100%;font-family:system-ui,Verdana,Arial,sans-serif;img{width:100%;height:auto;}};label:Root;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};const Root=({state})=>{const data=state.source.get(state.router.link);const[isOpen,setOpen]=Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])(false);const[page,setPage]=Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])(\"home\");const props=Object(react_spring__WEBPACK_IMPORTED_MODULE_10__[\"useSpring\"])({to:{opacity:1},from:{opacity:0}});const bwfade=Object(react_spring__WEBPACK_IMPORTED_MODULE_10__[\"useSpring\"])({to:{filter:\"saturate(100%)\"},from:{filter:\"saturate(0%)\"},config:react_spring__WEBPACK_IMPORTED_MODULE_10__[\"config\"].slow});//console.log(window.innerWidth);\nvar settings={dots:false,infinite:true,speed:600,autoplay:true,autoplaySpeed:400,slidesToShow:1,slidesToScroll:1,arrows:false};return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"Fragment\"],{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(frontity__WEBPACK_IMPORTED_MODULE_3__[\"Global\"],{styles:_ref}),splash?Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_Video__WEBPACK_IMPORTED_MODULE_14__[\"default\"],{}):Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"Fragment\"],{children:[page==\"home\"&&Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Sbg,{style:bwfade,src:_images_lesgomini_jpg__WEBPACK_IMPORTED_MODULE_12__[\"default\"]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Mdiv,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(hamburger_react__WEBPACK_IMPORTED_MODULE_9__[\"Squash\"],{toggled:isOpen,toggle:setOpen})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Toff,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(react_spring__WEBPACK_IMPORTED_MODULE_10__[\"animated\"].div,{style:props,children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Simg,{src:_logo_png__WEBPACK_IMPORTED_MODULE_11__[\"default\"]})})}),isOpen&&Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"Fragment\"],{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(Menu,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Simg,{onClick:()=>setOpen(!isOpen),src:_logo_png__WEBPACK_IMPORTED_MODULE_11__[\"default\"]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"br\",{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_frontity_components_link__WEBPACK_IMPORTED_MODULE_4__[\"default\"],{onClick:()=>{setOpen(!isOpen);setPage(\"home\");},link:\"/\",children:\"Home\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"br\",{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_frontity_components_link__WEBPACK_IMPORTED_MODULE_4__[\"default\"],{onClick:()=>{setOpen(!isOpen);setPage(\"blog\");},link:\"/\",children:\"Blog\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"br\",{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_frontity_components_link__WEBPACK_IMPORTED_MODULE_4__[\"default\"],{link:\"/about-us\",children:\"Store\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"br\",{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_frontity_components_link__WEBPACK_IMPORTED_MODULE_4__[\"default\"],{link:\"/about-us\",children:\"About Us\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"br\",{})]})}),page==\"home\"&&Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(react_spring__WEBPACK_IMPORTED_MODULE_10__[\"animated\"].div,{style:props,children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Homedesc,{children:\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas vestibulum magna in scelerisque pretium. Quisque metus elit, sollicitudin quis tincidunt vel, vehicula eu eros. Quisque ullamcorper in risus vel porta. Nullam pharetra, ipsum ut eleifend egestas, erat lorem luctus lectus.\"})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(\"main\",{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Tdiv,{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(_frontity_components_switch__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{children:[page==\"blog\"&&Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_List__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{when:data.isArchive}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_Post__WEBPACK_IMPORTED_MODULE_7__[\"default\"],{when:data.isPost}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_Page__WEBPACK_IMPORTED_MODULE_8__[\"default\"],{when:data.isPage})]}),data.isPost&&Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsxs\"])(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"Fragment\"],{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"strong\",{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(Return,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(_frontity_components_link__WEBPACK_IMPORTED_MODULE_4__[\"default\"],{onClick:()=>setPage(\"blog\"),link:\"/\",children:\"Back\"})})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"br\",{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"br\",{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_15__[\"jsx\"])(\"br\",{})]})]})]})]});};const Tdiv=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"div\", false?undefined:{target:\"e1b2n1on11\",label:\"Tdiv\"})( false?undefined:{name:\"13pvu72\",styles:\"background-color:red;width:auto\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWxlZXRcXGlsbGthdGFcXHBhY2thZ2VzXFxteXRoZW1lXFxzcmNcXGNvbXBvbmVudHNcXGluZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXlJdUIiLCJmaWxlIjoiQzpcXFVzZXJzXFxtbGVldFxcaWxsa2F0YVxccGFja2FnZXNcXG15dGhlbWVcXHNyY1xcY29tcG9uZW50c1xcaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIlxyXG5pbXBvcnQgeyBjb25uZWN0LCBHbG9iYWwsIGNzcywgc3R5bGVkIH0gZnJvbSBcImZyb250aXR5XCJcclxuaW1wb3J0IExpbmsgZnJvbSBcIkBmcm9udGl0eS9jb21wb25lbnRzL2xpbmtcIlxyXG5pbXBvcnQgU3dpdGNoIGZyb20gXCJAZnJvbnRpdHkvY29tcG9uZW50cy9zd2l0Y2hcIlxyXG5pbXBvcnQgTGlzdCBmcm9tICcuL0xpc3QnXHJcbmltcG9ydCBQb3N0IGZyb20gJy4vUG9zdCdcclxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9QYWdlJ1xyXG5pbXBvcnQgeyBTcXVhc2ggYXMgSGFtYnVyZ2VyIH0gZnJvbSAnaGFtYnVyZ2VyLXJlYWN0J1xyXG5pbXBvcnQgeyB1c2VTcHJpbmcsIGFuaW1hdGVkLCBjb25maWcgfSBmcm9tICdyZWFjdC1zcHJpbmcnXHJcbmltcG9ydCBMb2dvIGZyb20gJy4uL2xvZ28ucG5nJ1xyXG5pbXBvcnQgc2hpcnRiZyBmcm9tICcuLi9pbWFnZXMvbGVzZ29taW5pLmpwZydcclxuaW1wb3J0IHVzZVdpbmRvd0RpbWVuc2lvbnMgZnJvbSAnLi91c2VXaW5kb3cnXHJcbmltcG9ydCBWaWRlbyBmcm9tIFwiLi9WaWRlb1wiXHJcblxyXG5cclxuXHJcblxyXG5jb25zdCBWaWRlbzIgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgc3R5bGU9e3twb3NpdGlvbjogXCJmaXhlZFwiLCB6SW5kZXg6IFwiLTk5XCIsIHdpZHRoOiBcIjEwMCVcIiwgaGVpZ2h0OiBcIjEwMCVcIn19PlxyXG4gICAgICAgICAgICA8aWZyYW1lIGZyYW1lYm9yZGVyPVwiMFwiIGhlaWdodD1cIjEwMCVcIiB3aWR0aD1cIjEwMCVcIlxyXG4gICAgICAgICAgICAgICAgc3JjPVwiaHR0cHM6Ly95b3V0dWJlLmNvbS9lbWJlZC9JUjBPdW8xekFDQT9hdXRvcGxheT0xJmNvbnRyb2xzPTAmc2hvd2luZm89MCZhdXRvaGlkZT0xXCI+XHJcbiAgICAgICAgICAgIDwvaWZyYW1lPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59XHJcblxyXG5cclxuXHJcbmNvbnN0IENvbXBvbmVudCA9ICgpID0+IHtcclxuICAgIGNvbnN0IHsgaGVpZ2h0LCB3aWR0aCB9ID0gdXNlV2luZG93RGltZW5zaW9ucygpO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgd2lkdGg6IHt3aWR0aH0gfiBoZWlnaHQ6IHtoZWlnaHR9XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG59XHJcblxyXG5cclxuY29uc3QgUm9vdCA9ICh7IHN0YXRlIH0pID0+IHtcclxuXHJcbiAgICBjb25zdCBkYXRhID0gc3RhdGUuc291cmNlLmdldChzdGF0ZS5yb3V0ZXIubGluayk7XHJcbiAgICBjb25zdCBbaXNPcGVuLCBzZXRPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICAgIGNvbnN0IFtwYWdlLCBzZXRQYWdlXSA9IHVzZVN0YXRlKFwiaG9tZVwiKTtcclxuICAgIGNvbnN0IHByb3BzID0gdXNlU3ByaW5nKHsgdG86IHsgb3BhY2l0eTogMSB9LCBmcm9tOiB7IG9wYWNpdHk6IDAgfSB9KTtcclxuICAgIGNvbnN0IGJ3ZmFkZSA9IHVzZVNwcmluZyh7IHRvOiB7IGZpbHRlcjogXCJzYXR1cmF0ZSgxMDAlKVwiIH0sIGZyb206IHsgZmlsdGVyOiBcInNhdHVyYXRlKDAlKVwiIH0sIGNvbmZpZzogY29uZmlnLnNsb3cgfSk7XHJcblxyXG4gICAgLy9jb25zb2xlLmxvZyh3aW5kb3cuaW5uZXJXaWR0aCk7XHJcbiAgICB2YXIgc2V0dGluZ3MgPSB7XHJcbiAgICAgICAgZG90czogZmFsc2UsXHJcbiAgICAgICAgaW5maW5pdGU6IHRydWUsXHJcbiAgICAgICAgc3BlZWQ6IDYwMCxcclxuICAgICAgICBhdXRvcGxheTogdHJ1ZSxcclxuICAgICAgICBhdXRvcGxheVNwZWVkOiA0MDAsXHJcbiAgICAgICAgc2xpZGVzVG9TaG93OiAxLFxyXG4gICAgICAgIHNsaWRlc1RvU2Nyb2xsOiAxLFxyXG4gICAgICAgIGFycm93czogZmFsc2VcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8PlxyXG5cclxuICAgICAgICAgICAgPEdsb2JhbCBzdHlsZXM9e2Nzc2BcclxuICAgICAgICAgICAgKiB7XHJcbiAgICAgICAgICAgICAgICBtYXJnaW46IDA7XHJcbiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwO1xyXG4gICAgICAgICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGh0bWwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibGFjaztcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgICAgICBmb250LWZhbWlseTogc3lzdGVtLXVpLCBWZXJkYW5hLCBBcmlhbCwgc2Fucy1zZXJpZjtcclxuICAgICAgICAgICAgICAgICAgICBpbWcge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBhdXRvO1xyXG4gICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBgfVxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAge3NwbGFzaD8gPFZpZGVvIC8+OiBcclxuICAgICAgICAgICAgIDw+XHJcblxyXG4gICAgICAgICAgICB7cGFnZSA9PSBcImhvbWVcIiAmJiA8U2JnIHN0eWxlPXtid2ZhZGV9IHNyYz17c2hpcnRiZ30gLz59XHJcbiAgICAgICAgICAgIDxNZGl2PlxyXG4gICAgICAgICAgICAgICAgPEhhbWJ1cmdlciB0b2dnbGVkPXtpc09wZW59IHRvZ2dsZT17c2V0T3Blbn0gLz5cclxuICAgICAgICAgICAgPC9NZGl2PlxyXG4gICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgPFRvZmY+XHJcbiAgICAgICAgICAgICAgICA8YW5pbWF0ZWQuZGl2IHN0eWxlPXtwcm9wc30+PFNpbWcgc3JjPXtMb2dvfSAvPjwvYW5pbWF0ZWQuZGl2PlxyXG4gICAgICAgICAgICA8L1RvZmY+XHJcblxyXG4gICAgICAgICAgICB7aXNPcGVuICYmIDw+XHJcblxyXG4gICAgICAgICAgICAgICAgPE1lbnUgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxTaW1nIG9uQ2xpY2s9eygpID0+IHNldE9wZW4oIWlzT3Blbil9IHNyYz17TG9nb30gLz5cclxuICAgICAgICAgICAgICAgICAgICA8YnIgLz5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPExpbmsgb25DbGljaz17KCkgPT4geyBzZXRPcGVuKCFpc09wZW4pOyBzZXRQYWdlKFwiaG9tZVwiKSB9fSBsaW5rPVwiL1wiPkhvbWU8L0xpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPExpbmsgb25DbGljaz17KCkgPT4geyBzZXRPcGVuKCFpc09wZW4pOyBzZXRQYWdlKFwiYmxvZ1wiKSB9fSBsaW5rPVwiL1wiPkJsb2c8L0xpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPExpbmsgbGluaz1cIi9hYm91dC11c1wiPlN0b3JlPC9MaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxMaW5rIGxpbms9XCIvYWJvdXQtdXNcIj5BYm91dCBVczwvTGluaz5cclxuICAgICAgICAgICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgICAgIDwvTWVudT5cclxuICAgICAgICAgICAgPC8+fVxyXG4gICAgICAgICAgICB7cGFnZSA9PSBcImhvbWVcIiAmJlxyXG4gICAgICAgICAgICAgICAgPGFuaW1hdGVkLmRpdiBzdHlsZT17cHJvcHN9PlxyXG4gICAgICAgICAgICAgICAgICAgIDxIb21lZGVzYz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gTWFlY2VuYXMgdmVzdGlidWx1bSBtYWduYSBpbiBzY2VsZXJpc3F1ZSBwcmV0aXVtLiBRdWlzcXVlIG1ldHVzIGVsaXQsIHNvbGxpY2l0dWRpbiBxdWlzIHRpbmNpZHVudCB2ZWwsIHZlaGljdWxhIGV1IGVyb3MuIFF1aXNxdWUgdWxsYW1jb3JwZXIgaW4gcmlzdXMgdmVsIHBvcnRhLiBOdWxsYW0gcGhhcmV0cmEsIGlwc3VtIHV0IGVsZWlmZW5kIGVnZXN0YXMsIGVyYXQgbG9yZW0gbHVjdHVzIGxlY3R1cy5cclxuICAgICAgICAgICAgICAgICAgICA8L0hvbWVkZXNjPlxyXG4gICAgICAgICAgICAgICAgPC9hbmltYXRlZC5kaXY+fVxyXG5cclxuICAgICAgICAgICAgPG1haW4+XHJcbiAgICAgICAgICAgICAgICA8VGRpdj5cclxuXHJcbiAgICAgICAgICAgICAgICA8L1RkaXY+XHJcbiAgICAgICAgICAgICAgICA8U3dpdGNoPlxyXG4gICAgICAgICAgICAgICAgICAgIHtwYWdlID09IFwiYmxvZ1wiICYmIDxMaXN0IHdoZW49e2RhdGEuaXNBcmNoaXZlfSAvPn1cclxuICAgICAgICAgICAgICAgICAgICA8UG9zdCB3aGVuPXtkYXRhLmlzUG9zdH0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8UGFnZSB3aGVuPXtkYXRhLmlzUGFnZX0gLz5cclxuICAgICAgICAgICAgICAgIDwvU3dpdGNoPlxyXG4gICAgICAgICAgICAgICAge2RhdGEuaXNQb3N0ICYmIDw+PHN0cm9uZz48UmV0dXJuPjxMaW5rIG9uQ2xpY2s9eygpID0+IHNldFBhZ2UoXCJibG9nXCIpfSBsaW5rPVwiL1wiPkJhY2s8L0xpbms+PC9SZXR1cm4+PC9zdHJvbmc+PGJyIC8+PGJyIC8+PGJyIC8+PC8+fVxyXG4gICAgICAgICAgICA8L21haW4+XHJcbiAgICAgICAgICAgIDwvPn1cclxuICAgICAgICA8Lz5cclxuICAgICk7XHJcbn07XHJcblxyXG5jb25zdCBUZGl2ID0gc3R5bGVkLmRpdmBcclxuYmFja2dyb3VuZC1jb2xvcjogcmVkO1xyXG53aWR0aDphdXRvO1xyXG5gXHJcbmNvbnN0IFRpbWcgPSBzdHlsZWQuaW1nYFxyXG53aWR0aDogYXV0bztcclxuXHJcbmBcclxuXHJcbmNvbnN0IFJldHVybiA9IHN0eWxlZC5kaXZgXHJcbm1hcmdpbi10b3A6IDUlO1xyXG5mb250LXNpemU6IDEuNmVtO1xyXG53aWR0aDogYXV0bztcclxudGV4dC1hbGlnbjpyaWdodDtcclxubWFyZ2luLXJpZ2h0OiA1JTtcclxuJiA+IGEge1xyXG5jb2xvcjogd2hpdGU7XHJcbnRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxufVxyXG5gXHJcblxyXG5jb25zdCBIb21lZGVzYyA9IHN0eWxlZC5kaXZgXHJcbnBhZGRpbmc6IDE1JTtcclxuY29sb3I6IHdoaXRlO1xyXG5gXHJcblxyXG5jb25zdCBTYmcgPSBzdHlsZWQoYW5pbWF0ZWQuaW1nKWBcclxuaGVpZ2h0OiBhdXRvO1xyXG56LWluZGV4OiAtMTtcclxud2lkdGg6IDEwMCU7XHJcbnBvc2l0aW9uOiBmaXhlZDtcclxuYmFja2dyb3VuZC1jb2xvcjpibGFjaztcclxuXHJcbmBcclxuY29uc3QgTWRpdiA9IHN0eWxlZC5kaXZgXHJcbnRyYW5zZm9ybS1vcmlnaW46IHRvcCByaWdodDtcclxudHJhbnNmb3JtOiBzY2FsZSgxKTtcclxucG9zaXRpb246IGZpeGVkO1xyXG56LWluZGV4OiAzO1xyXG53aWR0aDogYXV0bztcclxucmlnaHQ6MDtcclxuYFxyXG5cclxuY29uc3QgVG9mZiA9IHN0eWxlZC5kaXZgXHJcbnBhZGRpbmctdG9wOiAxMi41JTtcclxuYFxyXG5cclxuY29uc3QgU2ltZyA9IHN0eWxlZC5pbWdgXHJcbndpZHRoOiA0MCU7XHJcbmRpc3BsYXk6IGJsb2NrO1xyXG5oZWlnaHQ6IGF1dG87XHJcbi8vaGVpZ2h0OiA0MCU7XHJcbm1hcmdpbi1sZWZ0OiBhdXRvO1xyXG5tYXJnaW4tcmlnaHQ6IGF1dG87XHJcbnotaW5kZXg6IDI7XHJcbmBcclxuXHJcbmNvbnN0IEZsZXhlbmQgPSBzdHlsZWQuZGl2YFxyXG5cclxuYFxyXG5cclxuY29uc3QgRmxleGdyb3cgPSBzdHlsZWQuZGl2YFxyXG5mbGV4LWdyb3c6IDQ7XHJcblxyXG5gXHJcblxyXG5jb25zdCBIZWFkZXIgPSBzdHlsZWQuaGVhZGVyYFxyXG5iYWNrZ3JvdW5kLWNvbG9yOiBncmVlbjtcclxucG9zaXRpb246IGZpeGVkO1xyXG5cclxuY29sb3I6IHdoaXRlO1xyXG5kaXNwbGF5OiBmbGV4O1xyXG5cclxuLy9vdXRsaW5lOiBncmV5IHNvbGlkIDFweDtcclxuXHJcbmBcclxuY29uc3QgTWVudSA9IHN0eWxlZC5uYXZgXHJcbiBwb3NpdGlvbjogZml4ZWQ7XHJcbiB3aWR0aDogMTAwJTtcclxudG9wOiAwO1xyXG5wYWRkaW5nLXRvcDogMTIuNSU7XHJcbm1hcmdpbi10b3AgOiAwO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBmb250LXNpemU6IDEwdnc7XHJcbiAgei1pbmRleDogMTtcclxuICBsaW5lLWhlaWdodDogMS41O1xyXG4gIGJhY2tncm91bmQtY29sb3I6IGJsYWNrO1xyXG4gIGhlaWdodDogMTAwJTtcclxuXHJcbiAgJiA+IGEge1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gIH1cclxuYFxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChSb290KSJdfQ== */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Timg=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"img\", false?undefined:{target:\"e1b2n1on10\",label:\"Timg\"})( false?undefined:{name:\"3abrc0\",styles:\"width:auto\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Return=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"div\", false?undefined:{target:\"e1b2n1on9\",label:\"Return\"})( false?undefined:{name:\"uq9s4d\",styles:\"margin-top:5%;font-size:1.6em;width:auto;text-align:right;margin-right:5%;&>a{color:white;text-decoration:none;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Homedesc=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"div\", false?undefined:{target:\"e1b2n1on8\",label:\"Homedesc\"})( false?undefined:{name:\"xlteoq\",styles:\"padding:15%;color:white\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Sbg=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(react_spring__WEBPACK_IMPORTED_MODULE_10__[\"animated\"].img, false?undefined:{target:\"e1b2n1on7\",label:\"Sbg\"})( false?undefined:{name:\"ygxys6\",styles:\"height:auto;z-index:-1;width:100%;position:fixed;background-color:black\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Mdiv=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"div\", false?undefined:{target:\"e1b2n1on6\",label:\"Mdiv\"})( false?undefined:{name:\"9efltw\",styles:\"transform-origin:top right;transform:scale(1);position:fixed;z-index:3;width:auto;right:0\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Toff=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"div\", false?undefined:{target:\"e1b2n1on5\",label:\"Toff\"})( false?undefined:{name:\"8fu4h1\",styles:\"padding-top:12.5%\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Simg=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"img\", false?undefined:{target:\"e1b2n1on4\",label:\"Simg\"})( false?undefined:{name:\"1w8yuno\",styles:\"width:40%;display:block;height:auto;margin-left:auto;margin-right:auto;z-index:2\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Flexend=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"div\", false?undefined:{target:\"e1b2n1on3\",label:\"Flexend\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");const Flexgrow=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"div\", false?undefined:{target:\"e1b2n1on2\",label:\"Flexgrow\"})( false?undefined:{name:\"aco78w\",styles:\"flex-grow:4\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Header=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"header\", false?undefined:{target:\"e1b2n1on1\",label:\"Header\"})( false?undefined:{name:\"1cgb41b\",styles:\"background-color:green;position:fixed;color:white;display:flex\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Menu=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"nav\", false?undefined:{target:\"e1b2n1on0\",label:\"Menu\"})( false?undefined:{name:\"164snlb\",styles:\"position:fixed;width:100%;top:0;padding-top:12.5%;margin-top:0;text-align:center;font-size:10vw;z-index:1;line-height:1.5;background-color:black;height:100%;&>a{color:white;text-decoration:none;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"connect\"])(Root));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/mytheme/src/components/index.js\n");

/***/ })

})