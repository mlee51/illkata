webpackHotUpdate("illkata",{

/***/ "./packages/mytheme/src/components/index.js":
/*!**************************************************!*\
  !*** ./packages/mytheme/src/components/index.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n/* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n/* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/src/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _frontity_components_link__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @frontity/components/link */ \"./node_modules/@frontity/components/link/index.tsx\");\n/* harmony import */ var _frontity_components_switch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @frontity/components/switch */ \"./node_modules/@frontity/components/switch.tsx\");\n/* harmony import */ var _List__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./List */ \"./packages/mytheme/src/components/List.js\");\n/* harmony import */ var _Post__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Post */ \"./packages/mytheme/src/components/Post.js\");\n/* harmony import */ var _Page__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Page */ \"./packages/mytheme/src/components/Page.js\");\n/* harmony import */ var hamburger_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! hamburger-react */ \"./node_modules/hamburger-react/dist-esm/index.js\");\n/* harmony import */ var react_spring__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! react-spring */ \"./node_modules/react-spring/web.js\");\n/* harmony import */ var _images_logo2_png__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../images/logo2.png */ \"./packages/mytheme/src/images/logo2.png\");\n/* harmony import */ var _images_lesgomini_jpg__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../images/lesgomini.jpg */ \"./packages/mytheme/src/images/lesgomini.jpg\");\n/* harmony import */ var _useWindow__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./useWindow */ \"./packages/mytheme/src/components/useWindow.js\");\n/* harmony import */ var _Video__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./Video */ \"./packages/mytheme/src/components/Video.js\");\n/* harmony import */ var _images_ig_svg__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../images/ig.svg */ \"./packages/mytheme/src/images/ig.svg\");\n/* harmony import */ var _images_kata_png__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../images/kata.png */ \"./packages/mytheme/src/images/kata.png\");\n/* harmony import */ var _emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @emotion/react/jsx-runtime */ \"./node_modules/@emotion/react/jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}const Video2=()=>{return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(\"div\",{style:{position:\"fixed\",zIndex:\"-99\",width:\"100%\",height:\"100%\"},children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(\"iframe\",{frameborder:\"0\",height:\"100%\",width:\"100%\",src:\"https://youtube.com/embed/IR0Ouo1zACA?autoplay=1&controls=0&showinfo=0&autohide=1\"})});};const Contact=()=>{return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsxs\"])(Footer,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(\"a\",{href:\"mailto:prepxxx32@gmail.com\",children:\"CONTACT\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(\"br\",{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(\"a\",{href:\"https://www.instagram.com/illkata/\",children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(Icon,{src:_images_ig_svg__WEBPACK_IMPORTED_MODULE_15__[\"default\"]})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(Icon,{src:_images_kata_png__WEBPACK_IMPORTED_MODULE_16__[\"default\"]})]});};var _ref= false?undefined:{name:\"1y3q25h-Root\",styles:\"@import url('https://fonts.googleapis.com/css2?family=Lato&display=swap');{}*{margin:0;padding:0;box-sizing:border-box;width:100%;}&::-webkit-scrollbar{display:none;}html{color:white;background-color:black;width:100%;font-family:'Lato',sans-serif;img{width:100%;height:auto;}};label:Root;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__};const Root=({state})=>{const data=state.source.get(state.router.link);const[isOpen,setOpen]=Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])(false);const[page,setPage]=Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])(\"home\");const props=Object(react_spring__WEBPACK_IMPORTED_MODULE_10__[\"useSpring\"])({to:{opacity:1},from:{opacity:0}});const bwfade=Object(react_spring__WEBPACK_IMPORTED_MODULE_10__[\"useSpring\"])({to:{filter:\"saturate(100%)\"},from:{filter:\"saturate(0%)\"},config:react_spring__WEBPACK_IMPORTED_MODULE_10__[\"config\"].slow});const[splash,setSplash]=Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])(true);//console.log(window.innerWidth);\nconst[show,set]=Object(react__WEBPACK_IMPORTED_MODULE_2__[\"useState\"])(true);const transitions=Object(react_spring__WEBPACK_IMPORTED_MODULE_10__[\"useTransition\"])(splash,{from:{opacity:0},enter:{opacity:1},leave:{opacity:0},reverse:splash,delay:300,config:react_spring__WEBPACK_IMPORTED_MODULE_10__[\"config\"].molasses});const pfade=Object(react_spring__WEBPACK_IMPORTED_MODULE_10__[\"useSpring\"])({// padding: hovered ? \"0.1vw\" : \"2vw\", \"10vw\" : \"6vw\",\nopacity:splash?\"0%\":\"100%\",filter:splash?\"saturate(0%)\":\"saturate(100%)\",config:react_spring__WEBPACK_IMPORTED_MODULE_10__[\"config\"].molasses});let button;let footer;if(page==\"home\"||splash||isOpen){footer=Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(Contact,{});}else{footer=Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"Fragment\"],{});}if(page==\"home\"||splash){button=Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(Banner,{src:_images_logo2_png__WEBPACK_IMPORTED_MODULE_11__[\"default\"]});}else{button=Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"Fragment\"],{});}return Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsxs\"])(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"Fragment\"],{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(frontity__WEBPACK_IMPORTED_MODULE_3__[\"Global\"],{styles:_ref}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(Mdiv,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(hamburger_react__WEBPACK_IMPORTED_MODULE_9__[\"Squash\"],{toggled:isOpen,toggle:setOpen})}),isOpen&&Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"Fragment\"],{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsxs\"])(Menu,{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(Simg,{onClick:()=>setOpen(!isOpen),src:_images_logo2_png__WEBPACK_IMPORTED_MODULE_11__[\"default\"]}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(\"br\",{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(_frontity_components_link__WEBPACK_IMPORTED_MODULE_4__[\"default\"],{onClick:()=>{setOpen(!isOpen);setPage(\"home\");setSplash(false);},link:\"/\",children:\"HOME\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(\"br\",{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(_frontity_components_link__WEBPACK_IMPORTED_MODULE_4__[\"default\"],{onClick:()=>{setOpen(!isOpen);setPage(\"blog\");setSplash(false);},link:\"/\",children:\"BLOG\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(\"br\",{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(_frontity_components_link__WEBPACK_IMPORTED_MODULE_4__[\"default\"],{onClick:()=>{setOpen(!isOpen);setPage(\"store\");setSplash(false);},link:\"/store\",children:\"KHARMARCY\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(\"br\",{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(_frontity_components_link__WEBPACK_IMPORTED_MODULE_4__[\"default\"],{onClick:()=>{setOpen(!isOpen);setPage(\"about\");setSplash(false);},link:\"/about\",children:\"ABOUT\"}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(\"br\",{})]})}),button,transitions((styles,item)=>item&&Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"Fragment\"],{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(react_spring__WEBPACK_IMPORTED_MODULE_10__[\"animated\"].div,{style:styles,children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(\"div\",{onClick:()=>setSplash(false),children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(_Video__WEBPACK_IMPORTED_MODULE_14__[\"default\"],{})})})})),!splash&&Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsxs\"])(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"Fragment\"],{children:[page==\"home\"&&Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(Sbg,{style:pfade,src:_images_lesgomini_jpg__WEBPACK_IMPORTED_MODULE_12__[\"default\"]}),page==\"home\"&&Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(react_spring__WEBPACK_IMPORTED_MODULE_10__[\"animated\"].div,{style:props,children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(Homedesc,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(\"b\",{children:\"WELCOME TO THE SANCTUM\"})})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsxs\"])(\"main\",{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(Tdiv,{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsxs\"])(_frontity_components_switch__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{children:[page==\"blog\"&&Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(_List__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{when:data.isArchive}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(_Post__WEBPACK_IMPORTED_MODULE_7__[\"default\"],{when:data.isPost}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(_Page__WEBPACK_IMPORTED_MODULE_8__[\"default\"],{when:data.isPage})]}),data.isPost&&Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsxs\"])(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"Fragment\"],{children:[Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(\"strong\",{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(Return,{children:Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(_frontity_components_link__WEBPACK_IMPORTED_MODULE_4__[\"default\"],{onClick:()=>setPage(\"blog\"),link:\"/\",children:\"Back\"})})}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(\"br\",{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(\"br\",{}),Object(_emotion_react_jsx_runtime__WEBPACK_IMPORTED_MODULE_17__[\"jsx\"])(\"br\",{})]})]})]}),footer]});};const Tdiv=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"div\", false?undefined:{target:\"e1b2n1on14\",label:\"Tdiv\"})( false?undefined:{name:\"13pvu72\",styles:\"background-color:red;width:auto\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Timg=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"img\", false?undefined:{target:\"e1b2n1on13\",label:\"Timg\"})( false?undefined:{name:\"3abrc0\",styles:\"width:auto\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Return=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"div\", false?undefined:{target:\"e1b2n1on12\",label:\"Return\"})( false?undefined:{name:\"uq9s4d\",styles:\"margin-top:5%;font-size:1.6em;width:auto;text-align:right;margin-right:5%;&>a{color:white;text-decoration:none;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Homedesc=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"div\", false?undefined:{target:\"e1b2n1on11\",label:\"Homedesc\"})( false?undefined:{name:\"5yapd3\",styles:\"padding:15%;font-size:1.2em;color:rgb(236,15,113);text-align:center;padding-top:45%\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Sbg=/*#__PURE__*/Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(react_spring__WEBPACK_IMPORTED_MODULE_10__[\"animated\"].img, false?undefined:{target:\"e1b2n1on10\",label:\"Sbg\"})( false?undefined:{name:\"ygxys6\",styles:\"height:auto;z-index:-1;width:100%;position:fixed;background-color:black\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Mdiv=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"div\", false?undefined:{target:\"e1b2n1on9\",label:\"Mdiv\"})( false?undefined:{name:\"13l83jl\",styles:\"transform-origin:top right;transform:scale(1);position:fixed;z-index:4;width:auto;right:0\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWxlZXRcXGlsbGthdGFcXHBhY2thZ2VzXFxteXRoZW1lXFxzcmNcXGNvbXBvbmVudHNcXGluZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWdOdUIiLCJmaWxlIjoiQzpcXFVzZXJzXFxtbGVldFxcaWxsa2F0YVxccGFja2FnZXNcXG15dGhlbWVcXHNyY1xcY29tcG9uZW50c1xcaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIlxyXG5pbXBvcnQgeyBjb25uZWN0LCBHbG9iYWwsIGNzcywgc3R5bGVkIH0gZnJvbSBcImZyb250aXR5XCJcclxuaW1wb3J0IExpbmsgZnJvbSBcIkBmcm9udGl0eS9jb21wb25lbnRzL2xpbmtcIlxyXG5pbXBvcnQgU3dpdGNoIGZyb20gXCJAZnJvbnRpdHkvY29tcG9uZW50cy9zd2l0Y2hcIlxyXG5pbXBvcnQgTGlzdCBmcm9tICcuL0xpc3QnXHJcbmltcG9ydCBQb3N0IGZyb20gJy4vUG9zdCdcclxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9QYWdlJ1xyXG5pbXBvcnQgeyBTcXVhc2ggYXMgSGFtYnVyZ2VyIH0gZnJvbSAnaGFtYnVyZ2VyLXJlYWN0J1xyXG5pbXBvcnQgeyB1c2VTcHJpbmcsIGFuaW1hdGVkLCBjb25maWcsIHVzZVRyYW5zaXRpb24gfSBmcm9tICdyZWFjdC1zcHJpbmcnXHJcbmltcG9ydCBMb2dvIGZyb20gJy4uL2ltYWdlcy9sb2dvMi5wbmcnXHJcbmltcG9ydCBzaGlydGJnIGZyb20gJy4uL2ltYWdlcy9sZXNnb21pbmkuanBnJ1xyXG5pbXBvcnQgdXNlV2luZG93RGltZW5zaW9ucyBmcm9tICcuL3VzZVdpbmRvdydcclxuaW1wb3J0IFZpZGVvIGZyb20gXCIuL1ZpZGVvXCJcclxuaW1wb3J0IElHIGZyb20gXCIuLi9pbWFnZXMvaWcuc3ZnXCJcclxuaW1wb3J0IEtBVEEgZnJvbSBcIi4uL2ltYWdlcy9rYXRhLnBuZ1wiXHJcblxyXG5cclxuXHJcblxyXG5jb25zdCBWaWRlbzIgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgcG9zaXRpb246IFwiZml4ZWRcIiwgekluZGV4OiBcIi05OVwiLCB3aWR0aDogXCIxMDAlXCIsIGhlaWdodDogXCIxMDAlXCIgfX0+XHJcbiAgICAgICAgICAgIDxpZnJhbWUgZnJhbWVib3JkZXI9XCIwXCIgaGVpZ2h0PVwiMTAwJVwiIHdpZHRoPVwiMTAwJVwiXHJcbiAgICAgICAgICAgICAgICBzcmM9XCJodHRwczovL3lvdXR1YmUuY29tL2VtYmVkL0lSME91bzF6QUNBP2F1dG9wbGF5PTEmY29udHJvbHM9MCZzaG93aW5mbz0wJmF1dG9oaWRlPTFcIj5cclxuICAgICAgICAgICAgPC9pZnJhbWU+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn1cclxuXHJcblxyXG5cclxuY29uc3QgQ29udGFjdCA9ICgpID0+IHtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxGb290ZXI+XHJcblxyXG4gICAgICAgICAgICA8YSBocmVmPVwibWFpbHRvOnByZXB4eHgzMkBnbWFpbC5jb21cIj5DT05UQUNUPC9hPlxyXG4gICAgICAgICAgICA8YnIvPlxyXG5cclxuICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vaWxsa2F0YS9cIj48SWNvbiBzcmM9e0lHfSAvPjwvYT48SWNvbiBzcmM9e0tBVEF9IC8+XHJcbiAgICAgICAgPC9Gb290ZXI+XHJcbiAgICApO1xyXG59XHJcblxyXG5cclxuY29uc3QgUm9vdCA9ICh7IHN0YXRlIH0pID0+IHtcclxuXHJcbiAgICBjb25zdCBkYXRhID0gc3RhdGUuc291cmNlLmdldChzdGF0ZS5yb3V0ZXIubGluayk7XHJcbiAgICBjb25zdCBbaXNPcGVuLCBzZXRPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICAgIGNvbnN0IFtwYWdlLCBzZXRQYWdlXSA9IHVzZVN0YXRlKFwiaG9tZVwiKTtcclxuICAgIGNvbnN0IHByb3BzID0gdXNlU3ByaW5nKHsgdG86IHsgb3BhY2l0eTogMSB9LCBmcm9tOiB7IG9wYWNpdHk6IDAgfSB9KTtcclxuICAgIGNvbnN0IGJ3ZmFkZSA9IHVzZVNwcmluZyh7IHRvOiB7IGZpbHRlcjogXCJzYXR1cmF0ZSgxMDAlKVwiIH0sIGZyb206IHsgZmlsdGVyOiBcInNhdHVyYXRlKDAlKVwiIH0sIGNvbmZpZzogY29uZmlnLnNsb3cgfSk7XHJcbiAgICBjb25zdCBbc3BsYXNoLCBzZXRTcGxhc2hdID0gdXNlU3RhdGUodHJ1ZSk7XHJcblxyXG4gICAgLy9jb25zb2xlLmxvZyh3aW5kb3cuaW5uZXJXaWR0aCk7XHJcblxyXG5cclxuICAgIGNvbnN0IFtzaG93LCBzZXRdID0gdXNlU3RhdGUodHJ1ZSlcclxuICAgIGNvbnN0IHRyYW5zaXRpb25zID0gdXNlVHJhbnNpdGlvbihzcGxhc2gsIHtcclxuICAgICAgICBmcm9tOiB7IG9wYWNpdHk6IDAgfSxcclxuICAgICAgICBlbnRlcjogeyBvcGFjaXR5OiAxIH0sXHJcbiAgICAgICAgbGVhdmU6IHsgb3BhY2l0eTogMCB9LFxyXG4gICAgICAgIHJldmVyc2U6IHNwbGFzaCxcclxuICAgICAgICBkZWxheTogMzAwLFxyXG4gICAgICAgIGNvbmZpZzogY29uZmlnLm1vbGFzc2VzXHJcbiAgICB9KVxyXG4gICAgY29uc3QgcGZhZGUgPSB1c2VTcHJpbmcoe1xyXG4gICAgICAgIC8vIHBhZGRpbmc6IGhvdmVyZWQgPyBcIjAuMXZ3XCIgOiBcIjJ2d1wiLCBcIjEwdndcIiA6IFwiNnZ3XCIsXHJcbiAgICAgICAgb3BhY2l0eTogc3BsYXNoID8gXCIwJVwiIDogXCIxMDAlXCIsXHJcbiAgICAgICAgZmlsdGVyOiBzcGxhc2ggPyBcInNhdHVyYXRlKDAlKVwiIDogXCJzYXR1cmF0ZSgxMDAlKVwiLFxyXG4gICAgICAgIGNvbmZpZzogY29uZmlnLm1vbGFzc2VzXHJcbiAgICB9KTtcclxuICAgIGxldCBidXR0b247XHJcbiAgICBsZXQgZm9vdGVyO1xyXG4gICAgaWYgKChwYWdlID09IFwiaG9tZVwiKSB8fCBzcGxhc2ggfHwgaXNPcGVuKSB7XHJcbiAgICAgICAgZm9vdGVyID0gPENvbnRhY3QgLz47XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZvb3RlciA9IDw+PC8+O1xyXG4gICAgfVxyXG5cclxuICAgIGlmICgocGFnZSA9PSBcImhvbWVcIikgfHwgc3BsYXNoKSB7XHJcbiAgICAgICAgYnV0dG9uID0gPEJhbm5lciBzcmM9e0xvZ299IC8+O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBidXR0b24gPSA8PjwvPjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcblxyXG4gICAgICAgICAgICA8R2xvYmFsIHN0eWxlcz17Y3NzYFxyXG4gICAgICAgICAgICBAaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1MYXRvJmRpc3BsYXk9c3dhcCcpO1xyXG4gICAgICAgICAgICAqIHtcclxuICAgICAgICAgICAgICAgIG1hcmdpbjogMDtcclxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDA7XHJcbiAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAmOjotd2Via2l0LXNjcm9sbGJhciB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGh0bWwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvL292ZXJmbG93OiBoaWRkZW47XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6ICdMYXRvJywgc2Fucy1zZXJpZjtcclxuICAgICAgICAgICAgICAgICAgICBpbWcge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBhdXRvO1xyXG4gICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBgfVxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8TWRpdj5cclxuICAgICAgICAgICAgICAgIDxIYW1idXJnZXIgdG9nZ2xlZD17aXNPcGVufSB0b2dnbGU9e3NldE9wZW59IC8+XHJcbiAgICAgICAgICAgIDwvTWRpdj5cclxuXHJcbiAgICAgICAgICAgIHtpc09wZW4gJiYgPD5cclxuXHJcbiAgICAgICAgICAgICAgICA8TWVudSA+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNpbWcgb25DbGljaz17KCkgPT4gc2V0T3BlbighaXNPcGVuKX0gc3JjPXtMb2dvfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxiciAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8TGluayBvbkNsaWNrPXsoKSA9PiB7IHNldE9wZW4oIWlzT3Blbik7IHNldFBhZ2UoXCJob21lXCIpOyBzZXRTcGxhc2goZmFsc2UpIH19IGxpbms9XCIvXCI+SE9NRTwvTGluaz5cclxuICAgICAgICAgICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8TGluayBvbkNsaWNrPXsoKSA9PiB7IHNldE9wZW4oIWlzT3Blbik7IHNldFBhZ2UoXCJibG9nXCIpOyBzZXRTcGxhc2goZmFsc2UpIH19IGxpbms9XCIvXCI+QkxPRzwvTGluaz5cclxuICAgICAgICAgICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8TGluayBvbkNsaWNrPXsoKSA9PiB7IHNldE9wZW4oIWlzT3Blbik7IHNldFBhZ2UoXCJzdG9yZVwiKTsgc2V0U3BsYXNoKGZhbHNlKSB9fSBsaW5rPVwiL3N0b3JlXCI+S0hBUk1BUkNZPC9MaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxMaW5rIG9uQ2xpY2s9eygpID0+IHsgc2V0T3BlbighaXNPcGVuKTsgc2V0UGFnZShcImFib3V0XCIpOyBzZXRTcGxhc2goZmFsc2UpIH19IGxpbms9XCIvYWJvdXRcIj5BQk9VVDwvTGluaz5cclxuICAgICAgICAgICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgICAgIDwvTWVudT5cclxuICAgICAgICAgICAgPC8+fVxyXG4gICAgICAgICAgICB7YnV0dG9ufVxyXG4gICAgICAgICAgICB7dHJhbnNpdGlvbnMoXHJcbiAgICAgICAgICAgICAgICAoc3R5bGVzLCBpdGVtKSA9PiBpdGVtICYmIDw+XHJcbiAgICAgICAgICAgICAgICAgICAgPGFuaW1hdGVkLmRpdiBzdHlsZT17c3R5bGVzfT48ZGl2IG9uQ2xpY2s9eygpID0+IHNldFNwbGFzaChmYWxzZSl9ID48VmlkZW8gLz48L2Rpdj48L2FuaW1hdGVkLmRpdj48Lz5cclxuICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgeyFzcGxhc2ggJiZcclxuICAgICAgICAgICAgICAgIDw+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHtwYWdlID09IFwiaG9tZVwiICYmIDxTYmcgc3R5bGU9e3BmYWRlfSBzcmM9e3NoaXJ0Ymd9IC8+fVxyXG4gICAgICAgICAgICAgICAgICAgIHtwYWdlID09IFwiaG9tZVwiICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhbmltYXRlZC5kaXYgc3R5bGU9e3Byb3BzfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxIb21lZGVzYz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj5XRUxDT01FIFRPIFRIRSBTQU5DVFVNPC9iPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Ib21lZGVzYz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9hbmltYXRlZC5kaXY+fVxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8bWFpbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFRkaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1RkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8U3dpdGNoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3BhZ2UgPT0gXCJibG9nXCIgJiYgPExpc3Qgd2hlbj17ZGF0YS5pc0FyY2hpdmV9IC8+fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFBvc3Qgd2hlbj17ZGF0YS5pc1Bvc3R9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UGFnZSB3aGVuPXtkYXRhLmlzUGFnZX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Td2l0Y2g+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhLmlzUG9zdCAmJiA8PjxzdHJvbmc+PFJldHVybj48TGluayBvbkNsaWNrPXsoKSA9PiBzZXRQYWdlKFwiYmxvZ1wiKX0gbGluaz1cIi9cIj5CYWNrPC9MaW5rPjwvUmV0dXJuPjwvc3Ryb25nPjxiciAvPjxiciAvPjxiciAvPjwvPn1cclxuICAgICAgICAgICAgICAgICAgICA8L21haW4+XHJcbiAgICAgICAgICAgICAgICA8Lz59XHJcbiAgICAgICAgICAgIHtmb290ZXJ9XHJcbiAgICAgICAgPC8+XHJcbiAgICApO1xyXG59O1xyXG5cclxuY29uc3QgVGRpdiA9IHN0eWxlZC5kaXZgXHJcbmJhY2tncm91bmQtY29sb3I6IHJlZDtcclxud2lkdGg6YXV0bztcclxuYFxyXG5jb25zdCBUaW1nID0gc3R5bGVkLmltZ2Bcclxud2lkdGg6IGF1dG87XHJcblxyXG5gXHJcblxyXG5jb25zdCBSZXR1cm4gPSBzdHlsZWQuZGl2YFxyXG5tYXJnaW4tdG9wOiA1JTtcclxuZm9udC1zaXplOiAxLjZlbTtcclxud2lkdGg6IGF1dG87XHJcbnRleHQtYWxpZ246cmlnaHQ7XHJcbm1hcmdpbi1yaWdodDogNSU7XHJcbiYgPiBhIHtcclxuY29sb3I6IHdoaXRlO1xyXG50ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbn1cclxuYFxyXG5cclxuY29uc3QgSG9tZWRlc2MgPSBzdHlsZWQuZGl2YFxyXG5wYWRkaW5nOiAxNSU7XHJcbmZvbnQtc2l6ZTogMS4yZW07XHJcbmNvbG9yOiByZ2IoMjM2LDE1LDExMyk7XHJcbnRleHQtYWxpZ246IGNlbnRlcjtcclxucGFkZGluZy10b3A6IDQ1JTtcclxuYFxyXG5cclxuY29uc3QgU2JnID0gc3R5bGVkKGFuaW1hdGVkLmltZylgXHJcbmhlaWdodDogYXV0bztcclxuei1pbmRleDogLTE7XHJcbndpZHRoOiAxMDAlO1xyXG5wb3NpdGlvbjogZml4ZWQ7XHJcbmJhY2tncm91bmQtY29sb3I6YmxhY2s7XHJcblxyXG5gXHJcbmNvbnN0IE1kaXYgPSBzdHlsZWQuZGl2YFxyXG50cmFuc2Zvcm0tb3JpZ2luOiB0b3AgcmlnaHQ7XHJcbnRyYW5zZm9ybTogc2NhbGUoMSk7XHJcbnBvc2l0aW9uOiBmaXhlZDtcclxuei1pbmRleDogNDtcclxud2lkdGg6IGF1dG87XHJcbnJpZ2h0OjA7XHJcbmBcclxuXHJcbmNvbnN0IFRvZmYgPSBzdHlsZWQuZGl2YFxyXG5cclxucGFkZGluZy10b3A6ICR7KHByb3BzKSA9PiBwcm9wcy5zcGxhc2ggPyBcIjEyLjUlXCIgOiBcIjAlXCJ9O1xyXG5gXHJcblxyXG5jb25zdCBCYW5uZXIgPSBzdHlsZWQuaW1nYFxyXG5wb3NpdGlvbjogZml4ZWQ7XHJcbnBhZGRpbmctdG9wOiAxMi41JTtcclxubGVmdDogMzAlO1xyXG53aWR0aDogNDAlO1xyXG5oZWlnaHQ6IGF1dG87XHJcbi8vaGVpZ2h0OiA0MCU7XHJcbnotaW5kZXg6IDE7XHJcbmBcclxuXHJcbmNvbnN0IEljb24gPSBzdHlsZWQuaW1nYFxyXG5oZWlnaHQ6IDFlbTtcclxud2lkdGg6IGF1dG87XHJcbmZpbHRlcjogaW52ZXJ0KDEpO1xyXG5gXHJcblxyXG5jb25zdCBTaW1nID0gc3R5bGVkLmltZ2BcclxuLy9wb3NpdGlvbjogZml4ZWQ7XHJcbndpZHRoOiAxMHJlbTtcclxuZGlzcGxheTogYmxvY2s7XHJcbmhlaWdodDogYXV0bztcclxuLy9oZWlnaHQ6IDQwJTtcclxubWFyZ2luLWxlZnQ6IGF1dG87XHJcbm1hcmdpbi1yaWdodDogYXV0bztcclxuei1pbmRleDogMjtcclxuYFxyXG5cclxuY29uc3QgRmxleGVuZCA9IHN0eWxlZC5kaXZgXHJcblxyXG5gXHJcblxyXG5jb25zdCBGbGV4Z3JvdyA9IHN0eWxlZC5kaXZgXHJcbmZsZXgtZ3JvdzogNDtcclxuXHJcbmBcclxuY29uc3QgRm9vdGVyID0gc3R5bGVkLmRpdmBcclxuICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgIGxlZnQ6IDA7XHJcbiAgICBib3R0b206IDA7XHJcbiAgICBmb250LXNpemU6IDEuNmVtO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICAvL2JhY2tncm91bmQtY29sb3I6IHJlZDtcclxuICAgIGNvbG9yOiBncmV5O1xyXG4gICAgei1pbmRleDogMjtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICYgPiBhIHtcclxuICAgICAgICBjb2xvcjogd2hpdGU7XHJcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gICAgICB9XHJcbiAgICBcclxuICBgXHJcbmNvbnN0IEhlYWRlciA9IHN0eWxlZC5oZWFkZXJgXHJcbmJhY2tncm91bmQtY29sb3I6IGdyZWVuO1xyXG5wb3NpdGlvbjogZml4ZWQ7XHJcblxyXG5jb2xvcjogd2hpdGU7XHJcbmRpc3BsYXk6IGZsZXg7XHJcblxyXG4vL291dGxpbmU6IGdyZXkgc29saWQgMXB4O1xyXG5cclxuYFxyXG5jb25zdCBNZW51ID0gc3R5bGVkLm5hdmBcclxuIHBvc2l0aW9uOiBmaXhlZDtcclxuIGhlaWdodDogMTAwJTtcclxudG9wOiAwO1xyXG5wYWRkaW5nLXRvcDogMTIuNSU7XHJcbm1hcmdpbi10b3AgOiAwO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBmb250LXNpemU6IDIuNXJlbTtcclxuICB6LWluZGV4OiAzO1xyXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XHJcbiAgaGVpZ2h0OiAxMDAlO1xyXG5cclxuICAmID4gYSB7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbiAgfVxyXG5gXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFJvb3QpIl19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Toff=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"div\", false?undefined:{target:\"e1b2n1on8\",label:\"Toff\"})(\"padding-top:\",props=>props.splash?\"12.5%\":\"0%\",\";\"+( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"));const Banner=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"img\", false?undefined:{target:\"e1b2n1on7\",label:\"Banner\"})( false?undefined:{name:\"1wllfl1\",styles:\"position:fixed;padding-top:12.5%;left:30%;width:40%;height:auto;z-index:1\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Icon=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"img\", false?undefined:{target:\"e1b2n1on6\",label:\"Icon\"})( false?undefined:{name:\"115ekw9\",styles:\"height:1em;width:auto;filter:invert(1)\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Simg=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"img\", false?undefined:{target:\"e1b2n1on5\",label:\"Simg\"})( false?undefined:{name:\"4se5m4\",styles:\"width:10rem;display:block;height:auto;margin-left:auto;margin-right:auto;z-index:2\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Flexend=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"div\", false?undefined:{target:\"e1b2n1on4\",label:\"Flexend\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");const Flexgrow=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"div\", false?undefined:{target:\"e1b2n1on3\",label:\"Flexgrow\"})( false?undefined:{name:\"aco78w\",styles:\"flex-grow:4\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Footer=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"div\", false?undefined:{target:\"e1b2n1on2\",label:\"Footer\"})( false?undefined:{name:\"jfpur4\",styles:\"position:fixed;display:inline-block;left:0;bottom:0;font-size:1.6em;width:100%;color:grey;z-index:2;text-align:center;&>a{color:white;text-decoration:none;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbWxlZXRcXGlsbGthdGFcXHBhY2thZ2VzXFxteXRoZW1lXFxzcmNcXGNvbXBvbmVudHNcXGluZGV4LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlReUIiLCJmaWxlIjoiQzpcXFVzZXJzXFxtbGVldFxcaWxsa2F0YVxccGFja2FnZXNcXG15dGhlbWVcXHNyY1xcY29tcG9uZW50c1xcaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIlxyXG5pbXBvcnQgeyBjb25uZWN0LCBHbG9iYWwsIGNzcywgc3R5bGVkIH0gZnJvbSBcImZyb250aXR5XCJcclxuaW1wb3J0IExpbmsgZnJvbSBcIkBmcm9udGl0eS9jb21wb25lbnRzL2xpbmtcIlxyXG5pbXBvcnQgU3dpdGNoIGZyb20gXCJAZnJvbnRpdHkvY29tcG9uZW50cy9zd2l0Y2hcIlxyXG5pbXBvcnQgTGlzdCBmcm9tICcuL0xpc3QnXHJcbmltcG9ydCBQb3N0IGZyb20gJy4vUG9zdCdcclxuaW1wb3J0IFBhZ2UgZnJvbSAnLi9QYWdlJ1xyXG5pbXBvcnQgeyBTcXVhc2ggYXMgSGFtYnVyZ2VyIH0gZnJvbSAnaGFtYnVyZ2VyLXJlYWN0J1xyXG5pbXBvcnQgeyB1c2VTcHJpbmcsIGFuaW1hdGVkLCBjb25maWcsIHVzZVRyYW5zaXRpb24gfSBmcm9tICdyZWFjdC1zcHJpbmcnXHJcbmltcG9ydCBMb2dvIGZyb20gJy4uL2ltYWdlcy9sb2dvMi5wbmcnXHJcbmltcG9ydCBzaGlydGJnIGZyb20gJy4uL2ltYWdlcy9sZXNnb21pbmkuanBnJ1xyXG5pbXBvcnQgdXNlV2luZG93RGltZW5zaW9ucyBmcm9tICcuL3VzZVdpbmRvdydcclxuaW1wb3J0IFZpZGVvIGZyb20gXCIuL1ZpZGVvXCJcclxuaW1wb3J0IElHIGZyb20gXCIuLi9pbWFnZXMvaWcuc3ZnXCJcclxuaW1wb3J0IEtBVEEgZnJvbSBcIi4uL2ltYWdlcy9rYXRhLnBuZ1wiXHJcblxyXG5cclxuXHJcblxyXG5jb25zdCBWaWRlbzIgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgc3R5bGU9e3sgcG9zaXRpb246IFwiZml4ZWRcIiwgekluZGV4OiBcIi05OVwiLCB3aWR0aDogXCIxMDAlXCIsIGhlaWdodDogXCIxMDAlXCIgfX0+XHJcbiAgICAgICAgICAgIDxpZnJhbWUgZnJhbWVib3JkZXI9XCIwXCIgaGVpZ2h0PVwiMTAwJVwiIHdpZHRoPVwiMTAwJVwiXHJcbiAgICAgICAgICAgICAgICBzcmM9XCJodHRwczovL3lvdXR1YmUuY29tL2VtYmVkL0lSME91bzF6QUNBP2F1dG9wbGF5PTEmY29udHJvbHM9MCZzaG93aW5mbz0wJmF1dG9oaWRlPTFcIj5cclxuICAgICAgICAgICAgPC9pZnJhbWU+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn1cclxuXHJcblxyXG5cclxuY29uc3QgQ29udGFjdCA9ICgpID0+IHtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxGb290ZXI+XHJcblxyXG4gICAgICAgICAgICA8YSBocmVmPVwibWFpbHRvOnByZXB4eHgzMkBnbWFpbC5jb21cIj5DT05UQUNUPC9hPlxyXG4gICAgICAgICAgICA8YnIvPlxyXG5cclxuICAgICAgICAgICAgPGEgaHJlZj1cImh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vaWxsa2F0YS9cIj48SWNvbiBzcmM9e0lHfSAvPjwvYT48SWNvbiBzcmM9e0tBVEF9IC8+XHJcbiAgICAgICAgPC9Gb290ZXI+XHJcbiAgICApO1xyXG59XHJcblxyXG5cclxuY29uc3QgUm9vdCA9ICh7IHN0YXRlIH0pID0+IHtcclxuXHJcbiAgICBjb25zdCBkYXRhID0gc3RhdGUuc291cmNlLmdldChzdGF0ZS5yb3V0ZXIubGluayk7XHJcbiAgICBjb25zdCBbaXNPcGVuLCBzZXRPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICAgIGNvbnN0IFtwYWdlLCBzZXRQYWdlXSA9IHVzZVN0YXRlKFwiaG9tZVwiKTtcclxuICAgIGNvbnN0IHByb3BzID0gdXNlU3ByaW5nKHsgdG86IHsgb3BhY2l0eTogMSB9LCBmcm9tOiB7IG9wYWNpdHk6IDAgfSB9KTtcclxuICAgIGNvbnN0IGJ3ZmFkZSA9IHVzZVNwcmluZyh7IHRvOiB7IGZpbHRlcjogXCJzYXR1cmF0ZSgxMDAlKVwiIH0sIGZyb206IHsgZmlsdGVyOiBcInNhdHVyYXRlKDAlKVwiIH0sIGNvbmZpZzogY29uZmlnLnNsb3cgfSk7XHJcbiAgICBjb25zdCBbc3BsYXNoLCBzZXRTcGxhc2hdID0gdXNlU3RhdGUodHJ1ZSk7XHJcblxyXG4gICAgLy9jb25zb2xlLmxvZyh3aW5kb3cuaW5uZXJXaWR0aCk7XHJcblxyXG5cclxuICAgIGNvbnN0IFtzaG93LCBzZXRdID0gdXNlU3RhdGUodHJ1ZSlcclxuICAgIGNvbnN0IHRyYW5zaXRpb25zID0gdXNlVHJhbnNpdGlvbihzcGxhc2gsIHtcclxuICAgICAgICBmcm9tOiB7IG9wYWNpdHk6IDAgfSxcclxuICAgICAgICBlbnRlcjogeyBvcGFjaXR5OiAxIH0sXHJcbiAgICAgICAgbGVhdmU6IHsgb3BhY2l0eTogMCB9LFxyXG4gICAgICAgIHJldmVyc2U6IHNwbGFzaCxcclxuICAgICAgICBkZWxheTogMzAwLFxyXG4gICAgICAgIGNvbmZpZzogY29uZmlnLm1vbGFzc2VzXHJcbiAgICB9KVxyXG4gICAgY29uc3QgcGZhZGUgPSB1c2VTcHJpbmcoe1xyXG4gICAgICAgIC8vIHBhZGRpbmc6IGhvdmVyZWQgPyBcIjAuMXZ3XCIgOiBcIjJ2d1wiLCBcIjEwdndcIiA6IFwiNnZ3XCIsXHJcbiAgICAgICAgb3BhY2l0eTogc3BsYXNoID8gXCIwJVwiIDogXCIxMDAlXCIsXHJcbiAgICAgICAgZmlsdGVyOiBzcGxhc2ggPyBcInNhdHVyYXRlKDAlKVwiIDogXCJzYXR1cmF0ZSgxMDAlKVwiLFxyXG4gICAgICAgIGNvbmZpZzogY29uZmlnLm1vbGFzc2VzXHJcbiAgICB9KTtcclxuICAgIGxldCBidXR0b247XHJcbiAgICBsZXQgZm9vdGVyO1xyXG4gICAgaWYgKChwYWdlID09IFwiaG9tZVwiKSB8fCBzcGxhc2ggfHwgaXNPcGVuKSB7XHJcbiAgICAgICAgZm9vdGVyID0gPENvbnRhY3QgLz47XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZvb3RlciA9IDw+PC8+O1xyXG4gICAgfVxyXG5cclxuICAgIGlmICgocGFnZSA9PSBcImhvbWVcIikgfHwgc3BsYXNoKSB7XHJcbiAgICAgICAgYnV0dG9uID0gPEJhbm5lciBzcmM9e0xvZ299IC8+O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBidXR0b24gPSA8PjwvPjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDw+XHJcblxyXG4gICAgICAgICAgICA8R2xvYmFsIHN0eWxlcz17Y3NzYFxyXG4gICAgICAgICAgICBAaW1wb3J0IHVybCgnaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1MYXRvJmRpc3BsYXk9c3dhcCcpO1xyXG4gICAgICAgICAgICAqIHtcclxuICAgICAgICAgICAgICAgIG1hcmdpbjogMDtcclxuICAgICAgICAgICAgICAgIHBhZGRpbmc6IDA7XHJcbiAgICAgICAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAmOjotd2Via2l0LXNjcm9sbGJhciB7XHJcbiAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGh0bWwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiB3aGl0ZTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvL292ZXJmbG93OiBoaWRkZW47XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udC1mYW1pbHk6ICdMYXRvJywgc2Fucy1zZXJpZjtcclxuICAgICAgICAgICAgICAgICAgICBpbWcge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMTAwJTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBhdXRvO1xyXG4gICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBgfVxyXG4gICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICA8TWRpdj5cclxuICAgICAgICAgICAgICAgIDxIYW1idXJnZXIgdG9nZ2xlZD17aXNPcGVufSB0b2dnbGU9e3NldE9wZW59IC8+XHJcbiAgICAgICAgICAgIDwvTWRpdj5cclxuXHJcbiAgICAgICAgICAgIHtpc09wZW4gJiYgPD5cclxuXHJcbiAgICAgICAgICAgICAgICA8TWVudSA+XHJcbiAgICAgICAgICAgICAgICAgICAgPFNpbWcgb25DbGljaz17KCkgPT4gc2V0T3BlbighaXNPcGVuKX0gc3JjPXtMb2dvfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxiciAvPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8TGluayBvbkNsaWNrPXsoKSA9PiB7IHNldE9wZW4oIWlzT3Blbik7IHNldFBhZ2UoXCJob21lXCIpOyBzZXRTcGxhc2goZmFsc2UpIH19IGxpbms9XCIvXCI+SE9NRTwvTGluaz5cclxuICAgICAgICAgICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8TGluayBvbkNsaWNrPXsoKSA9PiB7IHNldE9wZW4oIWlzT3Blbik7IHNldFBhZ2UoXCJibG9nXCIpOyBzZXRTcGxhc2goZmFsc2UpIH19IGxpbms9XCIvXCI+QkxPRzwvTGluaz5cclxuICAgICAgICAgICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgICAgICAgICA8TGluayBvbkNsaWNrPXsoKSA9PiB7IHNldE9wZW4oIWlzT3Blbik7IHNldFBhZ2UoXCJzdG9yZVwiKTsgc2V0U3BsYXNoKGZhbHNlKSB9fSBsaW5rPVwiL3N0b3JlXCI+S0hBUk1BUkNZPC9MaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxMaW5rIG9uQ2xpY2s9eygpID0+IHsgc2V0T3BlbighaXNPcGVuKTsgc2V0UGFnZShcImFib3V0XCIpOyBzZXRTcGxhc2goZmFsc2UpIH19IGxpbms9XCIvYWJvdXRcIj5BQk9VVDwvTGluaz5cclxuICAgICAgICAgICAgICAgICAgICA8YnIgLz5cclxuICAgICAgICAgICAgICAgIDwvTWVudT5cclxuICAgICAgICAgICAgPC8+fVxyXG4gICAgICAgICAgICB7YnV0dG9ufVxyXG4gICAgICAgICAgICB7dHJhbnNpdGlvbnMoXHJcbiAgICAgICAgICAgICAgICAoc3R5bGVzLCBpdGVtKSA9PiBpdGVtICYmIDw+XHJcbiAgICAgICAgICAgICAgICAgICAgPGFuaW1hdGVkLmRpdiBzdHlsZT17c3R5bGVzfT48ZGl2IG9uQ2xpY2s9eygpID0+IHNldFNwbGFzaChmYWxzZSl9ID48VmlkZW8gLz48L2Rpdj48L2FuaW1hdGVkLmRpdj48Lz5cclxuICAgICAgICAgICAgKX1cclxuICAgICAgICAgICAgeyFzcGxhc2ggJiZcclxuICAgICAgICAgICAgICAgIDw+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHtwYWdlID09IFwiaG9tZVwiICYmIDxTYmcgc3R5bGU9e3BmYWRlfSBzcmM9e3NoaXJ0Ymd9IC8+fVxyXG4gICAgICAgICAgICAgICAgICAgIHtwYWdlID09IFwiaG9tZVwiICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxhbmltYXRlZC5kaXYgc3R5bGU9e3Byb3BzfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxIb21lZGVzYz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj5XRUxDT01FIFRPIFRIRSBTQU5DVFVNPC9iPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Ib21lZGVzYz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9hbmltYXRlZC5kaXY+fVxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8bWFpbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPFRkaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L1RkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8U3dpdGNoPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3BhZ2UgPT0gXCJibG9nXCIgJiYgPExpc3Qgd2hlbj17ZGF0YS5pc0FyY2hpdmV9IC8+fVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFBvc3Qgd2hlbj17ZGF0YS5pc1Bvc3R9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8UGFnZSB3aGVuPXtkYXRhLmlzUGFnZX0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Td2l0Y2g+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtkYXRhLmlzUG9zdCAmJiA8PjxzdHJvbmc+PFJldHVybj48TGluayBvbkNsaWNrPXsoKSA9PiBzZXRQYWdlKFwiYmxvZ1wiKX0gbGluaz1cIi9cIj5CYWNrPC9MaW5rPjwvUmV0dXJuPjwvc3Ryb25nPjxiciAvPjxiciAvPjxiciAvPjwvPn1cclxuICAgICAgICAgICAgICAgICAgICA8L21haW4+XHJcbiAgICAgICAgICAgICAgICA8Lz59XHJcbiAgICAgICAgICAgIHtmb290ZXJ9XHJcbiAgICAgICAgPC8+XHJcbiAgICApO1xyXG59O1xyXG5cclxuY29uc3QgVGRpdiA9IHN0eWxlZC5kaXZgXHJcbmJhY2tncm91bmQtY29sb3I6IHJlZDtcclxud2lkdGg6YXV0bztcclxuYFxyXG5jb25zdCBUaW1nID0gc3R5bGVkLmltZ2Bcclxud2lkdGg6IGF1dG87XHJcblxyXG5gXHJcblxyXG5jb25zdCBSZXR1cm4gPSBzdHlsZWQuZGl2YFxyXG5tYXJnaW4tdG9wOiA1JTtcclxuZm9udC1zaXplOiAxLjZlbTtcclxud2lkdGg6IGF1dG87XHJcbnRleHQtYWxpZ246cmlnaHQ7XHJcbm1hcmdpbi1yaWdodDogNSU7XHJcbiYgPiBhIHtcclxuY29sb3I6IHdoaXRlO1xyXG50ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbn1cclxuYFxyXG5cclxuY29uc3QgSG9tZWRlc2MgPSBzdHlsZWQuZGl2YFxyXG5wYWRkaW5nOiAxNSU7XHJcbmZvbnQtc2l6ZTogMS4yZW07XHJcbmNvbG9yOiByZ2IoMjM2LDE1LDExMyk7XHJcbnRleHQtYWxpZ246IGNlbnRlcjtcclxucGFkZGluZy10b3A6IDQ1JTtcclxuYFxyXG5cclxuY29uc3QgU2JnID0gc3R5bGVkKGFuaW1hdGVkLmltZylgXHJcbmhlaWdodDogYXV0bztcclxuei1pbmRleDogLTE7XHJcbndpZHRoOiAxMDAlO1xyXG5wb3NpdGlvbjogZml4ZWQ7XHJcbmJhY2tncm91bmQtY29sb3I6YmxhY2s7XHJcblxyXG5gXHJcbmNvbnN0IE1kaXYgPSBzdHlsZWQuZGl2YFxyXG50cmFuc2Zvcm0tb3JpZ2luOiB0b3AgcmlnaHQ7XHJcbnRyYW5zZm9ybTogc2NhbGUoMSk7XHJcbnBvc2l0aW9uOiBmaXhlZDtcclxuei1pbmRleDogNDtcclxud2lkdGg6IGF1dG87XHJcbnJpZ2h0OjA7XHJcbmBcclxuXHJcbmNvbnN0IFRvZmYgPSBzdHlsZWQuZGl2YFxyXG5cclxucGFkZGluZy10b3A6ICR7KHByb3BzKSA9PiBwcm9wcy5zcGxhc2ggPyBcIjEyLjUlXCIgOiBcIjAlXCJ9O1xyXG5gXHJcblxyXG5jb25zdCBCYW5uZXIgPSBzdHlsZWQuaW1nYFxyXG5wb3NpdGlvbjogZml4ZWQ7XHJcbnBhZGRpbmctdG9wOiAxMi41JTtcclxubGVmdDogMzAlO1xyXG53aWR0aDogNDAlO1xyXG5oZWlnaHQ6IGF1dG87XHJcbi8vaGVpZ2h0OiA0MCU7XHJcbnotaW5kZXg6IDE7XHJcbmBcclxuXHJcbmNvbnN0IEljb24gPSBzdHlsZWQuaW1nYFxyXG5oZWlnaHQ6IDFlbTtcclxud2lkdGg6IGF1dG87XHJcbmZpbHRlcjogaW52ZXJ0KDEpO1xyXG5gXHJcblxyXG5jb25zdCBTaW1nID0gc3R5bGVkLmltZ2BcclxuLy9wb3NpdGlvbjogZml4ZWQ7XHJcbndpZHRoOiAxMHJlbTtcclxuZGlzcGxheTogYmxvY2s7XHJcbmhlaWdodDogYXV0bztcclxuLy9oZWlnaHQ6IDQwJTtcclxubWFyZ2luLWxlZnQ6IGF1dG87XHJcbm1hcmdpbi1yaWdodDogYXV0bztcclxuei1pbmRleDogMjtcclxuYFxyXG5cclxuY29uc3QgRmxleGVuZCA9IHN0eWxlZC5kaXZgXHJcblxyXG5gXHJcblxyXG5jb25zdCBGbGV4Z3JvdyA9IHN0eWxlZC5kaXZgXHJcbmZsZXgtZ3JvdzogNDtcclxuXHJcbmBcclxuY29uc3QgRm9vdGVyID0gc3R5bGVkLmRpdmBcclxuICAgIHBvc2l0aW9uOiBmaXhlZDtcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgIGxlZnQ6IDA7XHJcbiAgICBib3R0b206IDA7XHJcbiAgICBmb250LXNpemU6IDEuNmVtO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICAvL2JhY2tncm91bmQtY29sb3I6IHJlZDtcclxuICAgIGNvbG9yOiBncmV5O1xyXG4gICAgei1pbmRleDogMjtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgICYgPiBhIHtcclxuICAgICAgICBjb2xvcjogd2hpdGU7XHJcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gICAgICB9XHJcbiAgICBcclxuICBgXHJcbmNvbnN0IEhlYWRlciA9IHN0eWxlZC5oZWFkZXJgXHJcbmJhY2tncm91bmQtY29sb3I6IGdyZWVuO1xyXG5wb3NpdGlvbjogZml4ZWQ7XHJcblxyXG5jb2xvcjogd2hpdGU7XHJcbmRpc3BsYXk6IGZsZXg7XHJcblxyXG4vL291dGxpbmU6IGdyZXkgc29saWQgMXB4O1xyXG5cclxuYFxyXG5jb25zdCBNZW51ID0gc3R5bGVkLm5hdmBcclxuIHBvc2l0aW9uOiBmaXhlZDtcclxuIGhlaWdodDogMTAwJTtcclxudG9wOiAwO1xyXG5wYWRkaW5nLXRvcDogMTIuNSU7XHJcbm1hcmdpbi10b3AgOiAwO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBmb250LXNpemU6IDIuNXJlbTtcclxuICB6LWluZGV4OiAzO1xyXG4gIGxpbmUtaGVpZ2h0OiAxLjU7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XHJcbiAgaGVpZ2h0OiAxMDAlO1xyXG5cclxuICAmID4gYSB7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbiAgfVxyXG5gXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFJvb3QpIl19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Header=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"header\", false?undefined:{target:\"e1b2n1on1\",label:\"Header\"})( false?undefined:{name:\"1cgb41b\",styles:\"background-color:green;position:fixed;color:white;display:flex\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});const Menu=Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"styled\"])(\"nav\", false?undefined:{target:\"e1b2n1on0\",label:\"Menu\"})( false?undefined:{name:\"1ebgu99\",styles:\"position:fixed;height:100%;top:0;padding-top:12.5%;margin-top:0;text-align:center;font-size:2.5rem;z-index:3;line-height:1.5;background-color:black;height:100%;&>a{color:white;text-decoration:none;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_3__[\"connect\"])(Root));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/mytheme/src/components/index.js\n");

/***/ })

})